# Centralized Complete Staging Release Workflow
# This reusable workflow contains all the logic for the staging release process
name: Complete Staging Release Process

on:
  workflow_call:
    inputs:
      level:
        description: 'Release level for staging (patch, minor, major)'
        required: false
        default: 'patch'
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        description: 'Docker Hub username'
        required: false
      DOCKERHUB_TOKEN:
        description: 'Docker Hub access token'
        required: false
      PYPI_API_TOKEN:
        description: 'PyPI API token (required for token-based authentication)'
        required: false
      TEST_PYPI_API_TOKEN:
        description: 'Test PyPI API token (required for token-based authentication)'
        required: false
    outputs:
      version:
        description: 'Base version for staging'
        value: ${{ jobs.compute-version.outputs.version }}
      rc_version:
        description: 'RC version for staging'
        value: ${{ jobs.compute-version.outputs.rc_version }}
      staging_completed:
        description: 'Whether staging was completed successfully'
        value: ${{ jobs.staging-summary.outputs.success }}

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  # Parse project configuration from intent.yaml
  config:
    name: Parse Configuration
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_parse_project_config.yaml@master

  check-dockerfile:
    name: Check Dockerfile Exists
    runs-on: ubuntu-latest
    outputs:
      has_dockerfile: ${{ steps.check.outputs.has_dockerfile }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check for Dockerfile
        id: check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "✅ Dockerfile found"
            echo "has_dockerfile=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No Dockerfile found - Docker processes will be skipped"
            echo "has_dockerfile=false" >> $GITHUB_OUTPUT
          fi

  compute-version:
    name: Compute Staging Version
    runs-on: ubuntu-latest
    needs: config
    outputs:
      version: ${{ steps.version.outputs.version }}
      rc_version: ${{ steps.version.outputs.rc_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          # Only use ref for push events to master to get latest commit after version bump
          # In PR events, github.ref_name gives merge refs like "109/merge" which breaks checkout
          ref: ${{ github.event_name == 'push' && github.ref_name == 'master' && github.ref_name || '' }}

      - name: Setup Python with UV
        uses: Chisanan232/Template-Python-UV-Project/.github/actions/setup-python-uv@master

      - name: Compute staging version
        id: version
        run: |
          case "${{ inputs.level }}" in
            "patch")
              BUMP_FLAG="--bump patch"
              ;;
            "minor")
              BUMP_FLAG="--bump minor"
              ;;
            "major")
              BUMP_FLAG="--bump major"
              ;;
            *)
              BUMP_FLAG="--bump patch"
              ;;
          esac
          
          echo "Computing staging version with: uv version --dry-run $BUMP_FLAG"
          BASE_VERSION=$(uv version --short --dry-run $BUMP_FLAG)
          RC_VERSION="${BASE_VERSION}-rc.0"
          
          echo "version=$BASE_VERSION" >> $GITHUB_OUTPUT
          echo "rc_version=$RC_VERSION" >> $GITHUB_OUTPUT
          
          echo "Base version: $BASE_VERSION"
          echo "RC version: $RC_VERSION"

  build_git-tag_and_create_github-release:
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_build_git-tag_and_create_github-release_v2.yaml@master
    needs: [config, compute-version]
    with:
      version: ${{ needs.compute-version.outputs.rc_version }}
      checkout-sha: ${{ github.sha }}
      debug_mode: true
    secrets:
      github_auth_token: ${{ secrets.GITHUB_TOKEN }}

  pypi-test:
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_python_package.yaml@master
    needs: [config, compute-version, build_git-tag_and_create_github-release]
    with:
      operation: 'publish-testpypi'
      version: ${{ needs.compute-version.outputs.version }}
      checkout-sha: ${{ github.sha }}
      artifact-name: 'staging-python-package'
      auth-method: ${{ needs.config.outputs.python_auth_method }}
    secrets:
      PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}

  dockerhub-rc:
    name: Staging Release to DockerHub
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_docker_operations.yaml@master
    needs: [config, check-dockerfile, compute-version, build_git-tag_and_create_github-release]
    if: needs.check-dockerfile.outputs.has_dockerfile == 'true'
    secrets:
      dockerhub-user: ${{ secrets.DOCKERHUB_USERNAME }}
      registry-token: ${{ secrets.DOCKERHUB_TOKEN }}
    with:
      operation: 'push'
      registry: ${{ needs.config.outputs.docker_registry_dockerhub }}
      version: ${{ needs.compute-version.outputs.rc_version }}
      checkout-sha: ${{ github.sha }}
      enable-sbom: true
      enable-signing: true
      health-check-port: ${{ needs.config.outputs.docker_health_check_port }}
      health-check-path: ${{ needs.config.outputs.docker_health_check_path }}
      docker-run-options: ${{ needs.config.outputs.docker_run_options }}

  ghcr-rc:
    name: Staging Release to GHCR
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_docker_operations.yaml@master
    needs: [config, check-dockerfile, compute-version, build_git-tag_and_create_github-release]
    if: needs.check-dockerfile.outputs.has_dockerfile == 'true'
    with:
      operation: 'push'
      registry: ${{ needs.config.outputs.docker_registry_ghcr }}
      version: ${{ needs.compute-version.outputs.rc_version }}
      checkout-sha: ${{ github.sha }}
      enable-sbom: true
      enable-signing: true
      health-check-port: ${{ needs.config.outputs.docker_health_check_port }}
      health-check-path: ${{ needs.config.outputs.docker_health_check_path }}
      docker-run-options: ${{ needs.config.outputs.docker_run_options }}

  docs-preview:
    uses: Chisanan232/Template-Python-UV-Project/.github/workflows/rw_docs_operations.yaml@master
    needs: [config, compute-version]
    with:
      operation: 'deploy-preview'
      version: ${{ needs.compute-version.outputs.rc_version }}
      checkout-sha: ${{ github.sha }}
      preview-branch: ${{ needs.config.outputs.docs_preview_branch }}
      upload-artifacts: true

  staging-summary:
    name: Staging Release Summary
    runs-on: ubuntu-latest
    needs: [config, check-dockerfile, compute-version, pypi-test, dockerhub-rc, ghcr-rc, docs-preview]
    if: always()
    outputs:
      success: ${{ steps.summary.outputs.success }}
    steps:
      - name: Generate staging release summary
        id: summary
        run: |
          echo "=== Staging Release Summary ==="
          echo ""
          echo "Dockerfile Check: ${{ needs.check-dockerfile.outputs.has_dockerfile == 'true' && '✅ Found' || '⚠️ Not Found (Docker skipped)' }}"
          echo "Version Computation: ${{ needs.compute-version.result }}"
          echo "TestPyPI Upload: ${{ needs.pypi-test.result }}"
          
          # Check if Docker processes were run
          HAS_DOCKERFILE="${{ needs.check-dockerfile.outputs.has_dockerfile }}"
          if [ "$HAS_DOCKERFILE" = "true" ]; then
            echo "DockerHub RC Image: ${{ needs.dockerhub-rc.result }}"
            echo "GHCR RC Image: ${{ needs.ghcr-rc.result }}"
          else
            echo "DockerHub RC Image: ⏭️ Skipped (no Dockerfile)"
            echo "GHCR RC Image: ⏭️ Skipped (no Dockerfile)"
          fi
          
          echo "Docs Preview: ${{ needs.docs-preview.result }}"
          echo ""
          echo "📦 Staging Artifacts:"
          echo "- Base Version: ${{ needs.compute-version.outputs.version }}"
          echo "- RC Version: ${{ needs.compute-version.outputs.rc_version }}"
          echo "- TestPyPI: https://test.pypi.org/project/${{ needs.config.outputs.project_name }}/${{ needs.compute-version.outputs.version }}/"
          
          if [ "$HAS_DOCKERFILE" = "true" ]; then
            echo "- DockerHub RC Image: docker.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
            echo "- GHCR RC Image: ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
          fi
          
          echo "- Docs Preview: docs-preview branch"
          echo ""
          
          # Validate results based on whether Docker processes were expected
          VERSION_OK="${{ needs.compute-version.result == 'success' }}"
          PYPI_OK="${{ needs.pypi-test.result == 'success' }}"
          DOCS_OK="${{ needs.docs-preview.result == 'success' }}"
          
          if [ "$HAS_DOCKERFILE" = "true" ]; then
            # Docker processes should have run - validate them
            DOCKERHUB_OK="${{ needs.dockerhub-rc.result == 'success' }}"
            GHCR_OK="${{ needs.ghcr-rc.result == 'success' }}"
            
            if [[ "$VERSION_OK" == "true" && "$PYPI_OK" == "true" && \
                  "$DOCKERHUB_OK" == "true" && "$GHCR_OK" == "true" && "$DOCS_OK" == "true" ]]; then
              echo "✅ Staging release completed successfully!"
              echo "success=true" >> $GITHUB_OUTPUT
              echo ""
              echo "🧪 Testing Instructions:"
              echo "1. Install from TestPyPI:"
              echo "   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ needs.config.outputs.project_name }}==${{ needs.compute-version.outputs.version }}"
              echo ""
              echo "2. Test RC Docker images:"
              echo "   docker run -p ${{ needs.config.outputs.docker_health_check_port }}:${{ needs.config.outputs.docker_health_check_port }} ${{ needs.config.outputs.docker_run_options }} ghcr.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
              echo "   docker run -p ${{ needs.config.outputs.docker_health_check_port }}:${{ needs.config.outputs.docker_health_check_port }} ${{ needs.config.outputs.docker_run_options }} docker.io/${{ github.repository }}:${{ needs.compute-version.outputs.rc_version }}"
              echo ""
              echo "3. Review documentation preview in docs-preview branch"
              echo ""
            else
              echo "❌ Some staging deployment steps failed. Check the logs above."
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            # No Docker processes - only validate non-Docker components
            if [[ "$VERSION_OK" == "true" && "$PYPI_OK" == "true" && "$DOCS_OK" == "true" ]]; then
              echo "✅ Staging release completed successfully!"
              echo "⚠️ Note: Docker builds were skipped (no Dockerfile found)"
              echo "success=true" >> $GITHUB_OUTPUT
              echo ""
              echo "🧪 Testing Instructions:"
              echo "1. Install from TestPyPI:"
              echo "   pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ ${{ needs.config.outputs.project_name }}==${{ needs.compute-version.outputs.version }}"
              echo ""
              echo "2. Review documentation preview in docs-preview branch"
              echo ""
            else
              echo "❌ Some staging deployment steps failed. Check the logs above."
              echo "success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
